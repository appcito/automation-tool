# -*- coding: utf-8 -*-

"""
"""

__version__ = "0.0.1"

import csv
import argparse
import boto.ec2
import signal
import sys
import time
import boto.ec2.cloudwatch
import boto
import os
from prettytable import PrettyTable as table
# list if default regions selected by default
aws_regs = [ "us-east-1" , "us-west-1", "us-west-2", "eu-west-1", "ap-southeast-1", "ap-northeast-1", "ap-southeast-2", "sa-east-1" ]
tbl = table(["Instance Name", "Instance-id", "DNS","Public IP", "Size", "Region", "Internal IP","VPC Id", "Start Time", "Status"])
dependency_dictionary = {}


#---------------------------------------------------------------------------
#   A dictionary of colors
#---------------------------------------------------------------------------
colors = {
    'END' : '\033[0m',
    'BOLD' : '\033[1m',
    'UNDERLINE' : '\033[4m',
    'RED' : '\033[31m',
    'GREEN' : '\033[32m',
    'YELLOW' : '\033[33m',
    'BLUE' : '\033[34m',
    'PURPLE' : '\033[35m',
    'CYAN' : '\033[36m',
    'RED_LIGHT' : '\033[91m',
    'GREEN_LIGHT' : '\033[92m',
    'YELLOW_LIGHT' : '\033[93m',
    'BLUE_LIGHT' : '\033[94m',
    'PURPLE_LIGHT' : '\033[95m',
    'CYAN_LIGHT' : '\033[96m',
    'GREY' : '\033[90m',
    'DEFAULT' : '\033[99m'
}



def main():
    opts = vars(parse_args())
    aws_key = opts['aws_key']
    aws_secret = opts['aws_secret']
    region = opts['region']
    filter = opts['filter']

    filters = filter
    # validation of access key and secret
    if not aws_key or not aws_secret:
        if not aws_key:
            print >> sys.stderr,\
                "AWS_ACCESS_KEY_ID not set in environment and not",\
                "specified by -k AWS_KEY or --aws-key AWS_KEY"
        if not aws_secret:
            print >> sys.stderr,\
                "AWS_SECRET_ACCESS_KEY not set in envoronment and not",\
                "specified by -s AWS_SECRET or --aws-secret AWS_SECRET"
        sys.exit(2)
    # Checking if region is valid and convert into array
    regions = [].append( region and boto.ec2.get_region(region, aws_access_key_id=aws_key, aws_secret_access_key=aws_secret))
    regions = map( lambda s: boto.ec2.get_region(s, aws_access_key_id=aws_key, aws_secret_access_key = aws_secret), aws_regs) if not regions else regions

    for r in regions:
        try :
            conn = boto.ec2.connection.EC2Connection(aws_key, aws_secret, region=r)
            # list of (instance_name)
            instances = get_ec2_instances(conn,filters)
        except :
            pass
    print colors["GREEN"], "\n", tbl, colors["END"]



def get_ec2_instances(conn,filter):
    """
    Connects to EC2, returns a connection object
    """
    reservations = conn.get_all_instances()
    for reservation in reservations:
        for i in reservation.instances:
            if filter in ""+optional([i.tags['Name'] if i.tags.has_key('Name') else '',i.id,i.public_dns_name,i.ip_address,i.instance_type,i.placement,i.private_ip_address,i.vpc_id,i.launch_time,i.state]):
                tbl.add_row([i.tags['Name'] if i.tags.has_key('Name') else '',i.id,i.public_dns_name,i.ip_address,i.instance_type,i.placement,i.private_ip_address,i.vpc_id,i.launch_time,i.state])

def parse_args():
    parser = argparse.ArgumentParser()
    #Access key and secret would be picked up from environment variable
    parser.add_argument('-k', '--aws-key', type=str,
                        default=os.environ.get("AWS_ACCESS_KEY_ID"),
                        help='Amazon EC2 Key')
    parser.add_argument('-s', '--aws-secret', type=str,
                        default=os.environ.get("AWS_SECRET_ACCESS_KEY"),
                        help='Amazon EC2 Secret')
    # Pass Filter argument to limit result returned
    parser.add_argument('--filter', type=str, default='',
                        help=('Amazon EC2 API filter to limit the result returned. '
                              '(Example: --filter instance-state-name=running)'))


    return parser.parse_args()


if  __name__ =='__main__':
    main()

def optional(a):
    if not a:
        return ''
    return str(a)
